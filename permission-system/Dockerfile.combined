# 多阶段构建：第一阶段构建前端
FROM node:22-alpine AS frontend-builder

WORKDIR /app/frontend

# 复制前端依赖文件
COPY frontend/package*.json ./

# 安装依赖
RUN npm ci

# 复制前端源代码
COPY frontend/ ./

# 构建前端应用 (生产环境优化)
ENV NODE_ENV=production
RUN npm run build -- --production

# 第二阶段：构建后端并整合前端
FROM python:3.12-slim

WORKDIR /app

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# 复制后端依赖文件
COPY backend/requirements.txt .

# 安装Python依赖
RUN pip install --no-cache-dir -r requirements.txt

# 复制后端应用代码
COPY backend/ .

# 复制前端构建产物
COPY --from=frontend-builder /app/frontend/build /app/static

# 复制Nginx配置
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# 修改Nginx配置，将API请求代理到本地后端
RUN sed -i 's|proxy_pass http://backend:8000|proxy_pass http://localhost:8000|g' /etc/nginx/conf.d/default.conf

# 复制启动脚本
COPY start.sh /app/start.sh
RUN chmod +x /app/start.sh

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# 暴露端口
EXPOSE 80

# 启动命令
CMD ["/app/start.sh"]
